<?php

/**
 * This is the model base class for the table "order".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Order".
 *
 * Columns in table "order" available as properties of the model,
 * followed by relations of table "order" available as properties of the model.
 *
 * @property integer $order_id
 * @property integer $user_id
 * @property integer $pattern_id
 * @property string $fullname
 * @property string $location_name
 * @property string $street_address
 * @property string $address2
 * @property string $city
 * @property string $state
 * @property string $country
 * @property string $zipcode
 * @property string $color_type
 * @property integer $no_of_quantity
 * @property string $created_at
 * @property string $updated_at
 * @property string $status
 * @property string $field1
 * @property string $field2
 *
 * @property UserDetail $user
 */
abstract class BaseOrder extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'order';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Order|Orders', $n);
	}

	public static function representingColumn() {
		return 'fullname';
	}

	public function rules() {
		return array(
			array('order_id, user_id, pattern_id, fullname, location_name, street_address, address2, city, state, country, zipcode, color_type, no_of_quantity, created_at, field1, field2', 'required'),
			array('order_id, user_id, pattern_id, no_of_quantity', 'numerical', 'integerOnly'=>true),
			array('fullname, location_name, field1, field2', 'length', 'max'=>100),
			array('city, state, country, zipcode, color_type', 'length', 'max'=>50),
			array('status', 'length', 'max'=>1),
			array('updated_at', 'safe'),
			array('updated_at, status', 'default', 'setOnEmpty' => true, 'value' => null),
			array('order_id, user_id, pattern_id, fullname, location_name, street_address, address2, city, state, country, zipcode, color_type, no_of_quantity, created_at, updated_at, status, field1, field2', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'user' => array(self::BELONGS_TO, 'UserDetail', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'order_id' => Yii::t('app', 'Order'),
			'user_id' => null,
			'pattern_id' => Yii::t('app', 'Pattern Id'),
			'fullname' => Yii::t('app', 'Fullname'),
			'location_name' => Yii::t('app', 'Location Name'),
			'street_address' => Yii::t('app', 'Street Address'),
			'address2' => Yii::t('app', 'Address2'),
			'city' => Yii::t('app', 'City'),
			'state' => Yii::t('app', 'State'),
			'country' => Yii::t('app', 'Country'),
			'zipcode' => Yii::t('app', 'Zipcode'),
			'color_type' => Yii::t('app', 'Color Type'),
			'no_of_quantity' => Yii::t('app', 'No Of Quantity'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'status' => Yii::t('app', 'Status'),
			'field1' => Yii::t('app', 'Field1'),
			'field2' => Yii::t('app', 'Field2'),
			'user' => Yii::t('app', 'User Name'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('order_id', $this->order_id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('pattern_id', $this->pattern_id);
		$criteria->compare('fullname', $this->fullname, true);
		$criteria->compare('location_name', $this->location_name, true);
		$criteria->compare('street_address', $this->street_address, true);
		$criteria->compare('address2', $this->address2, true);
		$criteria->compare('city', $this->city, true);
		$criteria->compare('state', $this->state, true);
		$criteria->compare('country', $this->country, true);
		$criteria->compare('zipcode', $this->zipcode, true);
		$criteria->compare('color_type', $this->color_type, true);
		$criteria->compare('no_of_quantity', $this->no_of_quantity);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('field1', $this->field1, true);
		$criteria->compare('field2', $this->field2, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}