<?php

/**
 * This is the model base class for the table "event".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Event".
 *
 * Columns in table "event" available as properties of the model,
 * followed by relations of table "event" available as properties of the model.
 *
 * @property integer $event_id
 * @property integer $user_id
 * @property integer $wedding_id
 * @property string $event_name
 * @property string $event_datetime
 * @property string $event_location
 * @property string $event_address
 * @property string $event_latitute
 * @property string $event_longitude
 * @property string $event_description
 * @property string $event_link_album_id
 * @property string $created_at
 * @property string $updated_at
 * @property string $status
 * @property string $field1
 * @property string $field2
 *
 * @property UserDetail $user
 */
abstract class BaseEvent extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'event';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Event|Events', $n);
	}

	public static function representingColumn() {
		return 'event_name';
	}

	public function rules() {
		return array(
			array('user_id, wedding_id, event_name, event_datetime, event_location, event_address, event_latitute, event_longitude, event_description, event_link_album_id, created_at, field1, field2', 'required'),
			array('user_id, wedding_id', 'numerical', 'integerOnly'=>true),
			array('event_name, event_location, field1, field2', 'length', 'max'=>100),
			array('event_latitute, event_longitude', 'length', 'max'=>50),
			array('event_link_album_id', 'length', 'max'=>255),
			array('status', 'length', 'max'=>1),
			array('updated_at', 'safe'),
			array('updated_at, status', 'default', 'setOnEmpty' => true, 'value' => null),
			array('event_id, user_id, wedding_id, event_name, event_datetime, event_location, event_address, event_latitute, event_longitude, event_description, event_link_album_id, created_at, updated_at, status, field1, field2', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'user' => array(self::BELONGS_TO, 'UserDetail', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'event_id' => Yii::t('app', 'Event Id'),
			'user_id' => null,
			'wedding_id' => Yii::t('app', 'Wedding'),
			'event_name' => Yii::t('app', 'Event Name'),
			'event_datetime' => Yii::t('app', 'Event Datetime'),
			'event_location' => Yii::t('app', 'Event Location'),
			'event_address' => Yii::t('app', 'Event Address'),
			'event_latitute' => Yii::t('app', 'Event Latitute'),
			'event_longitude' => Yii::t('app', 'Event Longitude'),
			'event_description' => Yii::t('app', 'Event Description'),
			'event_link_album_id' => Yii::t('app', 'Event Link Album'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'status' => Yii::t('app', 'Status'),
			'field1' => Yii::t('app', 'Field1'),
			'field2' => Yii::t('app', 'Field2'),
			'user' => Yii::t('app', 'User Name'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('event_id', $this->event_id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('wedding_id', $this->wedding_id);
		$criteria->compare('event_name', $this->event_name, true);
		$criteria->compare('event_datetime', $this->event_datetime, true);
		$criteria->compare('event_location', $this->event_location, true);
		$criteria->compare('event_address', $this->event_address, true);
		$criteria->compare('event_latitute', $this->event_latitute, true);
		$criteria->compare('event_longitude', $this->event_longitude, true);
		$criteria->compare('event_description', $this->event_description, true);
		$criteria->compare('event_link_album_id', $this->event_link_album_id, true);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('field1', $this->field1, true);
		$criteria->compare('field2', $this->field2, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}