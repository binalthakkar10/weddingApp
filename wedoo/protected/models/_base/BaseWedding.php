<?php

/**
 * This is the model base class for the table "wedding".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Wedding".
 *
 * Columns in table "wedding" available as properties of the model,
 * followed by relations of table "wedding" available as properties of the model.
 *
 * @property integer $wedding_id
 * @property integer $user_id
 * @property string $wedding_time
 * @property string $to_bride_name
 * @property string $to_groom_name
 * @property string $to_partner_name
 * @property string $from_bride_name
 * @property string $from_groom_name
 * @property string $from_partner_name
 * @property string $wedding_date
 * @property string $wedding_location
 * @property string $street_address
 * @property string $wedding_uniq_id
 * @property string $biography
 * @property string $created_at
 * @property string $updated_at
 * @property string $status
 * @property string $image
 * @property string $field2
 * @property string $share_social
 * @property string $is_private
 *
 * @property Album[] $albums
 * @property BookletMgmt[] $bookletMgmts
 * @property Comment[] $comments
 * @property Feedback[] $feedbacks
 * @property InappPurchase[] $inappPurchases
 * @property Messages[] $messages
 * @property UserDetail $user
 */
abstract class BaseWedding extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'wedding';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Wedding|Weddings', $n);
	}

	public static function representingColumn() {
		return 'wedding_time';
	}

	public function rules() {
		return array(
			array('user_id, wedding_time, to_bride_name, to_groom_name, to_partner_name, from_bride_name, from_groom_name, from_partner_name, wedding_date, wedding_location, street_address, wedding_uniq_id, biography, created_at, image, field2, share_social, is_private', 'required'),
			array('user_id', 'numerical', 'integerOnly'=>true),
			array('wedding_time', 'length', 'max'=>20),
			array('to_bride_name, to_groom_name, to_partner_name, from_bride_name, from_groom_name, from_partner_name, wedding_location, wedding_uniq_id', 'length', 'max'=>50),
			array('status, share_social, is_private', 'length', 'max'=>1),
			array('image, field2', 'length', 'max'=>100),
			array('updated_at', 'safe'),
			array('updated_at, status', 'default', 'setOnEmpty' => true, 'value' => null),
			array('wedding_id, user_id, wedding_time, to_bride_name, to_groom_name, to_partner_name, from_bride_name, from_groom_name, from_partner_name, wedding_date, wedding_location, street_address, wedding_uniq_id, biography, created_at, updated_at, status, image, field2, share_social, is_private', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'albums' => array(self::HAS_MANY, 'Album', 'wedding_id'),
			'bookletMgmts' => array(self::HAS_MANY, 'BookletMgmt', 'wedding_id'),
			'comments' => array(self::HAS_MANY, 'Comment', 'wedding_id'),
			'feedbacks' => array(self::HAS_MANY, 'Feedback', 'wedding_id'),
			'inappPurchases' => array(self::HAS_MANY, 'InappPurchase', 'wedding_id'),
			'messages' => array(self::HAS_MANY, 'Messages', 'wedding_id'),
			'user' => array(self::BELONGS_TO, 'UserDetail', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'wedding_id' => Yii::t('app', 'Wedding'),
			'user_id' => null,
			'wedding_time' => Yii::t('app', 'Wedding Time'),
			'to_bride_name' => Yii::t('app', 'To Bride Name'),
			'to_groom_name' => Yii::t('app', 'To Groom Name'),
			'to_partner_name' => Yii::t('app', 'To Partner Name'),
			'from_bride_name' => Yii::t('app', 'From Bride Name'),
			'from_groom_name' => Yii::t('app', 'From Groom Name'),
			'from_partner_name' => Yii::t('app', 'From Partner Name'),
			'wedding_date' => Yii::t('app', 'Wedding Date'),
			'wedding_location' => Yii::t('app', 'Wedding Location'),
			'street_address' => Yii::t('app', 'Street Address'),
			'wedding_uniq_id' => Yii::t('app', 'Wedding Uniq'),
			'biography' => Yii::t('app', 'Biography'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'status' => Yii::t('app', 'Status'),
			'image' => Yii::t('app', 'Image'),
			'field2' => Yii::t('app', 'Field2'),
			'share_social' => Yii::t('app', 'Share Social'),
			'is_private' => Yii::t('app', 'Is Private'),
			'albums' => null,
			'bookletMgmts' => null,
			'comments' => null,
			'feedbacks' => null,
			'inappPurchases' => null,
			'messages' => null,
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('wedding_id', $this->wedding_id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('wedding_time', $this->wedding_time, true);
		$criteria->compare('to_bride_name', $this->to_bride_name, true);
		$criteria->compare('to_groom_name', $this->to_groom_name, true);
		$criteria->compare('to_partner_name', $this->to_partner_name, true);
		$criteria->compare('from_bride_name', $this->from_bride_name, true);
		$criteria->compare('from_groom_name', $this->from_groom_name, true);
		$criteria->compare('from_partner_name', $this->from_partner_name, true);
		$criteria->compare('wedding_date', $this->wedding_date, true);
		$criteria->compare('wedding_location', $this->wedding_location, true);
		$criteria->compare('street_address', $this->street_address, true);
		$criteria->compare('wedding_uniq_id', $this->wedding_uniq_id, true);
		$criteria->compare('biography', $this->biography, true);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('field2', $this->field2, true);
		$criteria->compare('share_social', $this->share_social, true);
		$criteria->compare('is_private', $this->is_private, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}